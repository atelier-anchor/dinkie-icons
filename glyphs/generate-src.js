import { readFileSync, writeFileSync } from 'fs'
import { join } from 'path'
import { fileURLToPath } from 'url'

const __dirname = fileURLToPath(new URL('.', import.meta.url))
const iconsPath = join(__dirname, 'icons.csv')
const glyphsPath = join(__dirname, 'glyphs.json')
const vueSrcPath = join(__dirname, '../packages/vue/src/icons.ts')
const reactSrcPath = join(__dirname, '../packages/react/src/icons.tsx')

const banner = '// Generated by glyphs/generate-src.js\n'
const vueImports = `
import { defineComponent, h } from 'vue'
import type { DefineComponent } from 'vue'
import type { DinkieIconProps } from './index'
`
const reactImports = `
import React from 'react'
import type { DinkieIconProps } from './index'
`

const basename = (glyph) => glyph.replace('.small', '').replace('.filled', '')
const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1)
const toComponentName = (map, glyph) =>
  'DinkieIcon' +
  map.get(basename(glyph)).split('-').map(capitalize).join('') +
  (glyph.includes('.filled') ? 'Filled' : '') +
  (glyph.includes('.small') ? '10' : '12')

const generateVueComponent = ({ name, size, path }) => `
export const ${name}: DefineComponent<DinkieIconProps> = defineComponent({
  name: '${name}',
  render: () =>
    h('svg', { xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 ${size} ${size}' }, [
      h('path', { fill: 'currentColor', d: '${path}' }),
    ]),
})
`

const generateReactComponent = ({ name, size, path }) => `
export const ${name} = ({ className }: DinkieIconProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox={'0 0 ${size} ${size}'} className={className}>
    <path fill="currentColor" d="${path}" />
  </svg>
)
`

const main = () => {
  const glyphNameMap = new Map(
    readFileSync(iconsPath, 'utf8')
      .split('\n')
      .slice(1)
      .map((line) => line.split(',').slice(0, 2).reverse())
  )
  const icons = Object.entries(JSON.parse(readFileSync(glyphsPath, 'utf8'))).map(
    ([glyph, path]) => ({
      name: toComponentName(glyphNameMap, glyph),
      size: glyph.includes('.small') ? 10 : 12,
      path,
    })
  )
  writeFileSync(vueSrcPath, banner + vueImports + icons.map(generateVueComponent).join(''))
  writeFileSync(reactSrcPath, banner + reactImports + icons.map(generateReactComponent).join(''))
}

main()
